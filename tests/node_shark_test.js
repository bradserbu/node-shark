

var nodeunit = require("nodeunit");
var nodeshark = require("../");
var util = require('util');

exports['NodeSharkTest'] = nodeunit.testCase({
  "process dns packet": function(test) {
    var dissector = new nodeshark.Dissector(nodeshark.LINK_LAYER_TYPE_ETHERNET);
    var buffer = new Buffer([
      0x58, 0x6d, 0x8f, 0x67, 0x8a, 0x4d, 0x00, 0x1b, 0x21, 0xcf, 0xa1, 0x00, 0x08, 0x00, 0x45, 0x00,
      0x00, 0x3b, 0xd1, 0xb0, 0x40, 0x00, 0x40, 0x11, 0xc5, 0xde, 0x0a, 0x14, 0x08, 0x65, 0xc0, 0xa8,
      0xd0, 0x01, 0xc5, 0x32, 0x00, 0x35, 0x00, 0x27, 0xa3, 0x5b, 0x65, 0x89, 0x01, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x04, 0x6c, 0x69, 0x76, 0x65,
      0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01
    ]);
    var packetHeader = {
      timestampSeconds: 10,
      timestampMicroseconds: 20,
      capturedLength: buffer.length,
      originalLength: buffer.length
    };
    var packet = dissector.dissect(packetHeader, buffer);
    //console.log(util.inspect(packet, true, 10));
    test.done();
  },

  "process dns response packet with multiple answers": function(test) {
    var dissector = new nodeshark.Dissector(nodeshark.LINK_LAYER_TYPE_ETHERNET);
    var buffer = new Buffer([
      0x00, 0x1b, 0x21, 0xcf, 0xa1, 0x00, 0x58, 0x6d, 0x8f, 0x67, 0x8a, 0x4d, 0x08, 0x00, 0x45, 0x00,
      0x01, 0x38, 0x36, 0xf5, 0x00, 0x00, 0x3f, 0x11, 0xa0, 0x9d, 0xc0, 0xa8, 0xd0, 0x01, 0x0a, 0x14,
      0x08, 0x65, 0x00, 0x35, 0xd1, 0x12, 0x01, 0x24, 0xd6, 0x5b, 0x85, 0x11, 0x81, 0x80, 0x00, 0x01,
      0x00, 0x07, 0x00, 0x04, 0x00, 0x04, 0x03, 0x77, 0x77, 0x77, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
      0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01,
      0x00, 0x09, 0x21, 0x0d, 0x00, 0x08, 0x03, 0x77, 0x77, 0x77, 0x01, 0x6c, 0xc0, 0x10, 0xc0, 0x2c,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x4a, 0x7d, 0x71, 0x6a, 0xc0, 0x2c,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x4a, 0x7d, 0x71, 0x93, 0xc0, 0x2c,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x4a, 0x7d, 0x71, 0x63, 0xc0, 0x2c,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x4a, 0x7d, 0x71, 0x67, 0xc0, 0x2c,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x4a, 0x7d, 0x71, 0x68, 0xc0, 0x2c,
      0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x4a, 0x7d, 0x71, 0x69, 0xc0, 0x10,
      0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x45, 0x8b, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x33, 0xc0, 0x10,
      0xc0, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x45, 0x8b, 0x00, 0x06, 0x03, 0x6e, 0x73, 0x32,
      0xc0, 0x10, 0xc0, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x45, 0x8b, 0x00, 0x06, 0x03, 0x6e,
      0x73, 0x31, 0xc0, 0x10, 0xc0, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x45, 0x8b, 0x00, 0x06,
      0x03, 0x6e, 0x73, 0x34, 0xc0, 0x10, 0xc0, 0xc4, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x8b, 0x38,
      0x00, 0x04, 0xd8, 0xef, 0x20, 0x0a, 0xc0, 0xb2, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x8b, 0x38,
      0x00, 0x04, 0xd8, 0xef, 0x22, 0x0a, 0xc0, 0xa0, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x8b, 0x38,
      0x00, 0x04, 0xd8, 0xef, 0x24, 0x0a, 0xc0, 0xd6, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x8b, 0x38,
      0x00, 0x04, 0xd8, 0xef, 0x26, 0x0a
    ]);
    var packetHeader = {
      timestampSeconds: 10,
      timestampMicroseconds: 20,
      capturedLength: buffer.length,
      originalLength: buffer.length
    };
    var packet = dissector.dissect(packetHeader, buffer);
    console.log(util.inspect(packet, true, 10));
    test.done();
  }
});
